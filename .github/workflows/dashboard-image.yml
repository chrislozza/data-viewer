name: Deploy Dashboard (Image Only)

on:
  push:
    branches:
      - main
    paths:
      - 'dashboard/**'
      - 'common/**'
      - '.github/workflows/dashboard-image.yml'
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
        type: string

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: data-viewer-dashboard

jobs:
  image-only:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code (push events)
      if: ${{ github.event_name == 'push' }}
      uses: actions/checkout@v4

    - name: Checkout code (manual trigger)
      if: ${{ github.event_name == 'workflow_dispatch' }}
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.target_branch }}

    - name: Determine branch and image tag
      id: branch-info
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          BRANCH="${{ github.event.inputs.target_branch }}"
        else
          BRANCH="${{ github.ref_name }}"
        fi

        SHA=$(git rev-parse HEAD)

        echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"
        echo "DEPLOY_BRANCH=$BRANCH" >> "$GITHUB_ENV"
        echo "IMAGE_TAG=$SHA" >> "$GITHUB_ENV"
        echo "🚀 Deploying from branch: $BRANCH"
        echo "📦 Image tag: $SHA"
        if [ "$BRANCH" = "main" ]; then
          echo "🎯 Production deployment"
        else
          echo "🧪 Branch deployment"
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Check ECR repository exists
      run: |
        if ! aws ecr describe-repositories --repository-name $ECR_REPOSITORY >/dev/null 2>&1; then
          echo "❌ ECR repository '$ECR_REPOSITORY' not found."
          echo "Please run the 'Deploy Dashboard (Apply)' workflow first to provision infrastructure."
          exit 1
        fi
        echo "✅ ECR repository found: $ECR_REPOSITORY"

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create GCP credentials file
      run: |
        set -euo pipefail
        mkdir -p .tmp
        echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' > .tmp/service-client.json

        if [ -f .tmp/service-client.json ]; then
          echo "✅ GCP credentials file created"
          ls -la .tmp/
          echo "File size: $(wc -c < .tmp/service-client.json) bytes"
        else
          echo "❌ Failed to create credentials file"
          exit 1
        fi

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
        DEPLOY_BRANCH: ${{ env.DEPLOY_BRANCH }}
      run: |
        set -euo pipefail

        if [ ! -f .tmp/service-client.json ]; then
          echo "❌ Error: .tmp/service-client.json not found"
          exit 1
        fi

        echo "📦 Building Docker image..."
        docker buildx build \
          --no-cache \
          --progress=plain \
          --load \
          --platform linux/amd64 \
          -f dashboard/deploy/Dockerfile \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$DEPLOY_BRANCH \
          .

        echo "✅ Build complete"
        echo "📤 Pushing images to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$DEPLOY_BRANCH

        echo "Tagging and pushing as 'latest' (required by App Runner service)"
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Cleanup credentials
      if: always()
      run: |
        rm -rf .tmp/service-client.json .tmp/
        echo "🧹 Credentials file cleaned up"

    - name: Verify ECR image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
        DEPLOY_BRANCH: ${{ env.DEPLOY_BRANCH }}
      run: |
        set -euo pipefail
        echo "Verifying image exists in ECR..."
        aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=$IMAGE_TAG
        aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=$DEPLOY_BRANCH
        aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=latest
        echo "✅ Images verified in ECR: $IMAGE_TAG, $DEPLOY_BRANCH, latest"

    - name: Deploy to App Runner
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
        DEPLOY_BRANCH: ${{ env.DEPLOY_BRANCH }}
      run: |
        set -euo pipefail
        SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$ECR_REPOSITORY'].ServiceArn" --output text)

        if [ -z "$SERVICE_ARN" ]; then
          echo "❌ App Runner service does not exist."
          echo "Please run the 'Deploy Dashboard (Apply)' workflow first to create infrastructure."
          exit 1
        fi

        echo "✅ App Runner service found: $SERVICE_ARN"
        SERVICE_STATUS=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query "Service.Status" --output text)
        echo "Current service status: $SERVICE_STATUS"

        if [ "$SERVICE_STATUS" = "OPERATION_IN_PROGRESS" ]; then
          echo "⏳ Service is currently updating... waiting"
          aws apprunner wait service-updated --service-arn $SERVICE_ARN
        fi

        echo "🚀 Triggering App Runner deployment..."
        aws apprunner start-deployment --service-arn "$SERVICE_ARN"
        echo "⏳ Waiting for deployment to complete..."
        aws apprunner wait service-updated --service-arn "$SERVICE_ARN"

        SERVICE_URL=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query "Service.ServiceUrl" --output text)
        echo "✅ Service deployed successfully!"
        echo "🌐 Service URL: https://$SERVICE_URL"

    - name: Output deployment info
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
        DEPLOY_BRANCH: ${{ env.DEPLOY_BRANCH }}
      run: |
        echo "Image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "Branch tag:  $ECR_REGISTRY/$ECR_REPOSITORY:$DEPLOY_BRANCH"
        echo "Latest tag:  $ECR_REGISTRY/$ECR_REPOSITORY:latest"
        SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$ECR_REPOSITORY'].ServiceArn" --output text)
        if [ -n "$SERVICE_ARN" ]; then
          SERVICE_URL=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query "Service.ServiceUrl" --output text 2>/dev/null || echo "")
          if [ -n "$SERVICE_URL" ]; then
            echo "Dashboard URL: https://$SERVICE_URL"
          fi
        fi
