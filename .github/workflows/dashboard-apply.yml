name: Deploy Dashboard (Apply)

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Git branch to deploy'
        required: true
        default: 'main'
        type: string

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: data-viewer-dashboard

jobs:
  apply:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.target_branch }}

    - name: Determine branch and image tag
      id: branch-info
      run: |
        BRANCH="${{ github.event.inputs.target_branch }}"
        SHA=$(git rev-parse HEAD)

        echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"
        echo "DEPLOY_BRANCH=$BRANCH" >> "$GITHUB_ENV"
        echo "IMAGE_TAG=$SHA" >> "$GITHUB_ENV"
        echo "🚀 Deploying from branch: $BRANCH"
        echo "📦 Image tag: $SHA"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Init & Import Existing Resources
      run: |
        set -euo pipefail
        cd dashboard/deploy/terraform
        terraform init

        echo "🔍 Checking for failed or stuck App Runner services..."
        FAILED_SERVICE=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='data-viewer-dashboard' && (Status=='CREATE_FAILED' || Status=='DELETE_FAILED')].ServiceArn" --output text)
        if [ -n "$FAILED_SERVICE" ]; then
          echo "⚠️  Found failed App Runner service: $FAILED_SERVICE"
          SERVICE_STATUS=$(aws apprunner describe-service --service-arn "$FAILED_SERVICE" --query "Service.Status" --output text)
          echo "   Current status: $SERVICE_STATUS"
          aws apprunner delete-service --service-arn "$FAILED_SERVICE"
          echo "⏳ Waiting for service deletion to complete..."
          aws apprunner wait service-deleted --service-arn "$FAILED_SERVICE" || true
          sleep 10
          echo "✅ Failed service deleted"
        else
          echo "✅ No failed services found"
        fi

        echo "📥 Importing existing resources into Terraform state..."
        terraform import aws_iam_role.apprunner_instance_role data-viewer-dashboard-apprunner-instance-role 2>/dev/null || true
        terraform import aws_iam_role.apprunner_access_role data-viewer-dashboard-apprunner-access-role 2>/dev/null || true
        terraform import aws_iam_role_policy.apprunner_instance_policy data-viewer-dashboard-apprunner-instance-role:data-viewer-dashboard-apprunner-instance-policy 2>/dev/null || true
        terraform import aws_iam_role_policy_attachment.apprunner_access_role_ecr data-viewer-dashboard-apprunner-access-role/arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess 2>/dev/null || true
        terraform import aws_ecr_repository.app_repository data-viewer-dashboard 2>/dev/null || true
        terraform import aws_ecr_lifecycle_policy.app_repository_policy data-viewer-dashboard 2>/dev/null || true
        terraform import aws_apprunner_auto_scaling_configuration_version.dashboard_autoscaling dv-dashboard-autoscale/1/* 2>/dev/null || true

    - name: Ensure ECR repository exists
      run: |
        set -euo pipefail
        cd dashboard/deploy/terraform
        terraform apply -auto-approve -target=aws_ecr_repository.app_repository -var="aws_region=${{ env.AWS_REGION }}"

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create GCP credentials file
      run: |
        set -euo pipefail
        mkdir -p .tmp
        echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' > .tmp/service-client.json
        if [ ! -f .tmp/service-client.json ]; then
          echo "❌ Failed to create credentials file"
          exit 1
        fi

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
        DEPLOY_BRANCH: ${{ env.DEPLOY_BRANCH }}
      run: |
        set -euo pipefail
        if [ ! -f .tmp/service-client.json ]; then
          echo "❌ Error: .tmp/service-client.json not found"
          exit 1
        fi

        docker buildx build \
          --no-cache \
          --progress=plain \
          --load \
          --platform linux/amd64 \
          -f dashboard/deploy/Dockerfile \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$DEPLOY_BRANCH \
          .

        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$DEPLOY_BRANCH

        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Cleanup credentials
      if: always()
      run: |
        rm -rf .tmp/service-client.json .tmp/

    - name: Verify ECR image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
        DEPLOY_BRANCH: ${{ env.DEPLOY_BRANCH }}
      run: |
        set -euo pipefail
        aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=$IMAGE_TAG
        aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=$DEPLOY_BRANCH
        aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=latest

    - name: Terraform Plan
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
      run: |
        set -euo pipefail
        cd dashboard/deploy/terraform
        terraform plan -var="aws_region=${{ env.AWS_REGION }}"

    - name: Terraform Apply
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
      run: |
        set -euo pipefail
        cd dashboard/deploy/terraform
        terraform apply -auto-approve -var="aws_region=${{ env.AWS_REGION }}"

    - name: Deploy to App Runner
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
        DEPLOY_BRANCH: ${{ env.DEPLOY_BRANCH }}
      run: |
        set -euo pipefail
        SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$ECR_REPOSITORY'].ServiceArn" --output text)
        if [ -z "$SERVICE_ARN" ]; then
          echo "❌ App Runner service does not exist."
          echo "Create the service by running the 'Deploy Dashboard (Recreate)' workflow first."
          exit 1
        fi

        SERVICE_STATUS=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query "Service.Status" --output text)
        if [ "$SERVICE_STATUS" = "OPERATION_IN_PROGRESS" ]; then
          aws apprunner wait service-updated --service-arn $SERVICE_ARN
        fi

        aws apprunner start-deployment --service-arn "$SERVICE_ARN"
        aws apprunner wait service-updated --service-arn "$SERVICE_ARN"
        SERVICE_URL=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query "Service.ServiceUrl" --output text)
        echo "✅ Service deployed successfully!"
        echo "🌐 Service URL: https://$SERVICE_URL"

    - name: Output deployment info
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
        DEPLOY_BRANCH: ${{ env.DEPLOY_BRANCH }}
      run: |
        echo "Image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "Branch tag:  $ECR_REGISTRY/$ECR_REPOSITORY:$DEPLOY_BRANCH"
        echo "Latest tag:  $ECR_REGISTRY/$ECR_REPOSITORY:latest"
        SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$ECR_REPOSITORY'].ServiceArn" --output text)
        if [ -n "$SERVICE_ARN" ]; then
          SERVICE_URL=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query "Service.ServiceUrl" --output text 2>/dev/null || echo "")
          if [ -n "$SERVICE_URL" ]; then
            echo "Dashboard URL: https://$SERVICE_URL"
          fi
        fi
